services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sgvmart-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-697188}
      POSTGRES_DB: ${DB_NAME:-sgvmart}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - sgvmart-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sgvmart-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-697188}@postgres:5432/${DB_NAME:-sgvmart}
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - PORT=3000
      - HOST=0.0.0.0
      - NETWORK_IP=0.0.0.0
      - NODE_ENV=production
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - CEREBRAS_API_KEY=${CEREBRAS_API_KEY}
    expose:
      - "3000"
    networks:
      - sgvmart-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      sh -c "
      echo '‚è≥ Waiting for database to be ready...' &&
      sleep 3 &&
      echo 'üîÑ Applying database migrations...' &&
      npx prisma migrate deploy &&
      echo '‚úÖ Migrations completed successfully' &&
      echo 'üöÄ Starting backend server...' &&
      node dist/server.js
      "

  # Frontend (React + NGINX)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sgvmart-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
      - DOMAIN=ggvault.shop
      - EMAIL=admin@ggvault.shop
    volumes:
      - letsencrypt-data:/etc/letsencrypt
      - certbot-webroot:/var/www/certbot
    networks:
      - sgvmart-network

volumes:
  postgres-data:
    driver: local
  letsencrypt-data:
    driver: local
  certbot-webroot:
    driver: local

networks:
  sgvmart-network:
    driver: bridge
